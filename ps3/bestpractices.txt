#ps3-1
#Kehsin Su
#3033114294
(c)
I have read Best Practice for Scientific Computing, and I have raised the question that why the author does not recommend research groups to implement all the 10 recommendations at once since it mentioned that these approaches can gain productivity in short time?
Also, how did the author measure that the time cost to implement these recommendations can be offset "immediately" by productivity? (Honestly, I think the time cost to modify the coding habits and familiar with a new coding environment is very high)

(d)
(i)
I think the 7th method is very useful, and test_driven development is very interesting! Even though the author mentioned there is not significant impact on productivity, I guess it can help me to know what I should code down more clearly.

I think the 8th suggestion should not use such determined word "only" since sometimes if people are working on very huge programs, the efficiency is also important, otherwise, they need to wait for a long time to make sure their results are correct. Although accuracy is generally more important than efficiency, programmers should still consider how long their code will consume the testers time and how long they can get the result and make sure it is correct.

(ii)
I am currently using the second method. As the author mentioned, I think to keep typing repetitive code is not efficient at all and very easy to make mistakes. Moreover, it seems a little hard for me to remember all the structures of each function, and with that method, I  can just modify some part of my codes to complete most of the tasks. It's a more easy way for me to manage my codes.

(iii)
For the first method, I guess that, sometimes, researcher just do some easy trails, so they do not want to waste their time to type long words to name meaningful functions or set good formats.Instead, for the convenience, they will only name their functions or variables x, y and results. 


I believe, normally, they will use method  2, 3, 5 and 6 to track their experiment results and reduce mistakes. Among these recommendations, I think 2,3, 6 are easiest to implement since they only need to install editors or change their working environment.On the other hand, 4, 9 and 10 are the most difficult part to implement as it will take longer time to ask a programmer to change their coding habits.



(iv)
I think 1, 2, 3, 6 and 9 are the general rules for both data analysis and software engineering.

1, 3 and 9 are especially important for data analysis since the key concept for data analysis is to make good use of data to obtain useful information.
The concept why to choose such method is quite important, so use recommendation 1 and 9 to write down meaningful function names and add some comment on the approach is essential. Also, people will obtain lots of variables while analysis data, so they need use recommendation 3 to record the history.

For software engineering 4, 5, 7, 8, and 10 seem more for it. As software programmers usually deal with huge programs, they need to collaborate together and work on it for longer times. At such situation, how to track where is modified, when such modification made, how to debug and how to collaborate with other programmers are necessary. Also, programmers usually care about the efficiency since they have learned more about algorithms, so recommendation 8 is the rule they should keep in mind. 



